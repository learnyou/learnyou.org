# This file was *autogenerated* from the file nz-bijection.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_9 = Integer(9); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0p4 = RealNumber('0.4'); _sage_const_15 = Integer(15); _sage_const_0p03 = RealNumber('0.03'); _sage_const_20 = Integer(20)#!/usr/bin/env sage

from numpy import arange

# the function q(x) from before
def q(x):
    if x % _sage_const_2  == _sage_const_0 :
        return x/_sage_const_2 
    else:
        return -_sage_const_1  * ((x+_sage_const_1 )/_sage_const_2 )

points = []                     # Empty list of points
labels = []                     # Empty list of labels
point_color='blue'
label_color='black'
line_color='red'
font_size=_sage_const_15 

# We're going to use a pretty limited set of inputs, from 0 to 10,
# inclusive
for x in range(_sage_const_0 , _sage_const_11 ):
    # We're going to append the vector (x, q(x)) to the list of
    # points.
    point = (x, q(x))
    points.append(point)

    # Next, we need to create a label
    t = text('$' + str(point) + '$',
             (point[_sage_const_0 ]+_sage_const_0p03 , point[_sage_const_1 ]-_sage_const_0p4 ),
             rgbcolor=label_color,
             fontsize=_sage_const_20 ,
             horizontal_alignment='left'
            )
    labels.append(t)        # Add the label to the list

# Next, we need to plot the points
plt = list_plot(points,
                pointsize=_sage_const_100 ,                 # Larger points
                ticks=[_sage_const_1 ,_sage_const_1 ],
                # tick_formatter=1,             # The ticks should be pretty
                color=point_color,            # Red points
                axes_labels=['$x$', '$q(x)$'] # Labels for the axes
               )

plt = plt + sum(labels)         # add the labels
plt.fontsize(font_size)
plt.save("nz-bijection.png")    # Save the graph to a file

joins = list_plot(points, color=line_color, plotjoined=True, thickness=_sage_const_2 , linestyle="--")
joined_plot = plt + joins
joined_plot.fontsize(font_size)
joined_plot.save("nz-bijection-joined.png")

t = var('t')
lines = sum(
    [ plot(_sage_const_0p5 *t, (t, _sage_const_0 , _sage_const_10 ), color='red'),
      plot((-_sage_const_0p5 *t) - _sage_const_0p5 , (t, _sage_const_1 , _sage_const_9 ), color='red')
    ]
)
lined_plot = joined_plot + lines
lined_plot.fontsize(font_size)
lined_plot.save("nz-bijection-withlines.png")
