\s{Introduction (for real this time)}\label{real-intro}

This is a math book. Well, duh. Why did I write it?

Most math (and science) books nowadays seem to value keeping an academic
tone over ensuring that the reader understands the material, and ---
more importantly --- enjoys reading the book.

I take the opposite approach. I want to create a book that is fun to
read and easy to understand, while eschewing the practice of making
myself look good.

In high school, and even in college, I noticed that subjects were taught
with pragmatism in mind: here's what you need to learn to have a job
doing X.  It completely zaps the intellectual curiosity of the
students. I think that's a shame. I hope reading this book will rekindle
your intellectual curiosity.

The inspiration for this book is
\href{http://learnyouahaskell.com/}{{\it Learn You a Haskell for Great
    Good!}, by Miran Lipovaƒça}. Haskell is a programming language, and
LYAH is a great book for learning Haskell. If you are interested in a
print copy of LYAH, see \cite{lyah}.

There is also an incomplete and unofficial
\link{https://github.com/gazay/lysa}{Russian translation}, courtesy of
Alexey Gaziev.

\ss{Programming}

In this book, I cover a lot of hard stuff.\footnote{This isn't actually
  true. Math isn't hard, stupid!} Sometimes, it's useful to program your
way through a problem. You don't have to, but it helps. Every programmer
will tell you that programming teaches a manner of thinking.

Many programmers will cite Steve Jobs's\footnote{For you youngsters,
  Steve Jobs is the former CEO of Apple. He's dead now.} famous quote,
regarding the use of programming in his job,

\begin{iquote}
    [sic] \ldots much more importantly, it had nothing to do with using
    [the programs we wrote] for anything practical. It had to do with
    using them to be a mirror of your thought process; to actually learn
    how to think. I think everybody in this country should learn how to
    program a computer --- should learn a computer language --- because
    it teaches you how to think.
\end{iquote}

\nocite{jobs-programming}

That first sentence or two is actually a pretty good description of
mathematics (and programming). Both are incredibly useful, and have
endless practical applications.

That's not the point, though. The whole usefulness thing is a side
gig. It's about learning how to think, and having a rigorous language
through which to express your thoughts.

Furthermore, the rigor of the language helps you build upon your current
thoughts to find out even cooler things. That's what math (and
programming) is about.

\link{http://www.sagemath.org/}{Sage} is a mathematically-oriented
programming language. If you're familiar with Mathematica or Maple, Sage
is an open-source alternative.

Sage is perhaps most useful in generating graphs transparently. Sage is
also capable of solving your equations, finding holes in your logic, the
whole 9 yards. 

I would include instructions for installing Sage. However, it takes up a
lot of space, and my instructions would quickly be obselete. You can
find better instructions for installing Sage on
\link{http://wiki.sagemath.org/DownloadAndInstallationGuide}{their
  website}.
